# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TIUJom4UcRnyqT0--NnTGLDbnsuKqVeZ
"""

# Commented out IPython magic to ensure Python compatibility.
# importing all the essential libraries
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
# %matplotlib inline
from sklearn.cluster import KMeans

"""Loading the dataset"""

df =pd.read_csv('Iris Flower.csv')
df.head()

df['Species'],categories = pd.factorize(df['Species'])
df.head()

df.describe

df.isna().sum()

from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax = fig.add_subplot(111, projection= '3d')
ax.scatter(df.PetalLengthCm, df.PetalWidthCm, df.Species)
ax.set_xlabel('PetalLengthCm')
ax.set_ylabel('PetalWidthCm')
ax.set_zlabel('Species')
plt.title('3D Scatter Plot Example')
plt.show()

from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax = fig.add_subplot(111, projection= '3d')
ax.scatter(df.SepalLengthCm, df.SepalWidthCm, df.Species)
ax.set_xlabel('SepalLengthCm')
ax.set_ylabel('SepalWidthCm')
ax.set_zlabel('Species')
plt.title('3D Scatter Plot Example')
plt.show()

sns.scatterplot(data=df, x="SepalLengthCm", y="SepalWidthCm", hue="Species");

sns.scatterplot(data=df, x="PetalLengthCm", y="PetalWidthCm", hue="Species");

sse = []
for k in range(1, 10):
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(df[['PetalLengthCm', 'PetalWidthCm']])
    sse.append(kmeans.inertia_)

sse

k= range(1, 10)
plt.xlabel('k')
plt.ylabel("Sum of Squared errors")
plt.plot(k, sse)



"""# New Section"""

km=KMeans(n_clusters=3, random_state=0,)
y_predicted = km.fit_predict(df[['PetalLengthCm', 'PetalWidthCm']])
y_predicted

df['cluster']=y_predicted
df.head(150)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(df.Species, df.cluster)
cm

true_labels = df.Species
predicted_labels= df.cluster

cm=confusion_matrix(true_labels, predicted_labels)
class_labels = ['Setosa', 'Versicolor', 'Virginica']

#plot confusion matrix
plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
plt.title('Confusion Matrix')
plt.colorbar()
tick_marks = np.arange(len(class_labels))
plt.xticks(tick_marks, class_labels)
plt.yticks(tick_marks, class_labels)

#fill the matrix with values
for i in range(len(class_labels)):
    for j in range(len(class_labels)):
        plt.text(j, i, str(cm[i][j]), ha='center', va='center', color='white')

# Set x and y labels, and show the plot
plt.xlabel('Predicted label')
plt.ylabel('True label')
plt.show()